// <auto-generated />
using System;
using Day2.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Day2.Migrations
{
    [DbContext(typeof(ITIContext))]
    [Migration("20240924073956_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Day2.Models.Course", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Day2.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Loc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ins_id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ins_id")
                        .IsUnique();

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Day2.Models.Ins_Course", b =>
                {
                    b.Property<int>("ins_id")
                        .HasColumnType("int");

                    b.Property<int>("crs_id")
                        .HasColumnType("int");

                    b.HasKey("ins_id", "crs_id");

                    b.HasIndex("crs_id");

                    b.ToTable("Ins_Courses");
                });

            modelBuilder.Entity("Day2.Models.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("Dept_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.HasKey("ID");

                    b.HasIndex("Dept_id");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("Day2.Models.Std_Crs", b =>
                {
                    b.Property<int>("st_id")
                        .HasColumnType("int");

                    b.Property<int>("crs_id")
                        .HasColumnType("int");

                    b.HasKey("st_id", "crs_id");

                    b.HasIndex("crs_id");

                    b.ToTable("Std_Crs");
                });

            modelBuilder.Entity("Day2.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("dept_id")
                        .HasColumnType("int");

                    b.Property<int?>("leader_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("dept_id");

                    b.HasIndex("leader_id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Day2.Models.Department", b =>
                {
                    b.HasOne("Day2.Models.Instructor", "manager")
                        .WithOne("manageDepartment")
                        .HasForeignKey("Day2.Models.Department", "ins_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("manager");
                });

            modelBuilder.Entity("Day2.Models.Ins_Course", b =>
                {
                    b.HasOne("Day2.Models.Course", "course")
                        .WithMany("courses")
                        .HasForeignKey("crs_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Day2.Models.Instructor", "instructor")
                        .WithMany("Courses")
                        .HasForeignKey("ins_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("instructor");
                });

            modelBuilder.Entity("Day2.Models.Instructor", b =>
                {
                    b.HasOne("Day2.Models.Department", "workDepartment")
                        .WithMany("Instructors")
                        .HasForeignKey("Dept_id");

                    b.Navigation("workDepartment");
                });

            modelBuilder.Entity("Day2.Models.Std_Crs", b =>
                {
                    b.HasOne("Day2.Models.Course", "course")
                        .WithMany("Crs")
                        .HasForeignKey("crs_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Day2.Models.Student", "student")
                        .WithMany("Crs")
                        .HasForeignKey("st_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("student");
                });

            modelBuilder.Entity("Day2.Models.Student", b =>
                {
                    b.HasOne("Day2.Models.Department", "department")
                        .WithMany("students")
                        .HasForeignKey("dept_id");

                    b.HasOne("Day2.Models.Student", "leader")
                        .WithMany("group")
                        .HasForeignKey("leader_id");

                    b.Navigation("department");

                    b.Navigation("leader");
                });

            modelBuilder.Entity("Day2.Models.Course", b =>
                {
                    b.Navigation("Crs");

                    b.Navigation("courses");
                });

            modelBuilder.Entity("Day2.Models.Department", b =>
                {
                    b.Navigation("Instructors");

                    b.Navigation("students");
                });

            modelBuilder.Entity("Day2.Models.Instructor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("manageDepartment")
                        .IsRequired();
                });

            modelBuilder.Entity("Day2.Models.Student", b =>
                {
                    b.Navigation("Crs");

                    b.Navigation("group");
                });
#pragma warning restore 612, 618
        }
    }
}
